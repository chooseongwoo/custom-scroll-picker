{"code":"import { __spreadArray } from \"tslib\";\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\nvar ScrollPicker = function (_a) {\n    var list = _a.list, onSelectedChange = _a.onSelectedChange, _b = _a.ScrollPickerLayout, ScrollPickerLayout = _b === void 0 ? \"ul\" : _b, _c = _a.ScrollPickerCenter, ScrollPickerCenter = _c === void 0 ? \"div\" : _c, _d = _a.ScrollPickerItem, ScrollPickerItem = _d === void 0 ? \"li\" : _d;\n    var SCROLL_DEBOUNCE_TIME = 100;\n    var newList = __spreadArray(__spreadArray([\"\"], list, true), [\"\"], false);\n    var ref = useRef(null);\n    var _e = useState(1), selected = _e[0], setSelected = _e[1];\n    var itemRefs = useRef([]);\n    var timerRef = useRef(null);\n    var ITEM_HEIGHT = 50;\n    var handleScroll = useCallback(function () {\n        if (ref.current) {\n            clearTimeout(timerRef.current);\n            if (ref.current.scrollTop < ITEM_HEIGHT) {\n                ref.current.scrollTop = ITEM_HEIGHT;\n            }\n            timerRef.current = setTimeout(function () {\n                var _a;\n                var index = Math.floor((ref.current.scrollTop + ITEM_HEIGHT / 2) / ITEM_HEIGHT);\n                if (list[index] !== \"\") {\n                    setSelected(index);\n                    (_a = itemRefs.current[index]) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n                        behavior: \"smooth\",\n                        block: \"center\",\n                    });\n                    onSelectedChange && onSelectedChange(newList[index]);\n                }\n            }, SCROLL_DEBOUNCE_TIME);\n        }\n    }, [onSelectedChange, newList]);\n    useEffect(function () {\n        if (ref.current) {\n            ref.current.scrollTop = selected * ITEM_HEIGHT;\n        }\n    }, []);\n    return (React.createElement(ScrollPickerLayout, { ref: ref, onScroll: handleScroll },\n        React.createElement(ScrollPickerCenter, null),\n        newList.map(function (item, index) { return (React.createElement(ScrollPickerItem, { key: index, isSelected: index === selected, ref: function (el) { return (itemRefs.current[index] = el); } }, item)); })));\n};\nexport default ScrollPicker;\n","references":["/Users/chooseongwoo/Coding/Project/ScrollPicker/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/chooseongwoo/Coding/Project/ScrollPicker/node_modules/.cache/rollup-plugin-typescript2/placeholder/ScrollPicker.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\ninterface ScrollPickerProps {\n    list: string[];\n    onSelectedChange?: (selected: string) => void;\n    ScrollPickerLayout?: React.ElementType;\n    ScrollPickerCenter?: React.ElementType;\n    ScrollPickerItem?: React.ElementType;\n}\ndeclare const ScrollPicker: ({ list, onSelectedChange, ScrollPickerLayout, ScrollPickerCenter, ScrollPickerItem, }: ScrollPickerProps) => React.JSX.Element;\nexport default ScrollPicker;\n"}}
