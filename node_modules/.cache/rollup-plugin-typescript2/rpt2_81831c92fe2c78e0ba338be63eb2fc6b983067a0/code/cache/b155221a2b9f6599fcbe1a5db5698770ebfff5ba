{"code":"import { __spreadArray } from \"tslib\";\r\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nvar ScrollPicker = function (_a) {\r\n    var list = _a.list, onSelectedChange = _a.onSelectedChange, _b = _a.ScrollPickerLayout, ScrollPickerLayout = _b === void 0 ? \"ul\" : _b, _c = _a.ScrollPickerCenter, ScrollPickerCenter = _c === void 0 ? \"div\" : _c, _d = _a.ScrollPickerItem, ScrollPickerItem = _d === void 0 ? \"li\" : _d;\r\n    var SCROLL_DEBOUNCE_TIME = 100;\r\n    var newList = __spreadArray(__spreadArray([\"\"], list, true), [\"\"], false);\r\n    var ref = useRef(null);\r\n    var _e = useState(1), selected = _e[0], setSelected = _e[1];\r\n    var itemRefs = useRef([]);\r\n    var timerRef = useRef(null);\r\n    var ITEM_HEIGHT = 50;\r\n    var handleScroll = useCallback(function () {\r\n        if (ref.current) {\r\n            clearTimeout(timerRef.current);\r\n            if (ref.current.scrollTop < ITEM_HEIGHT) {\r\n                ref.current.scrollTop = ITEM_HEIGHT;\r\n            }\r\n            timerRef.current = setTimeout(function () {\r\n                var _a;\r\n                var index = Math.floor((ref.current.scrollTop + ITEM_HEIGHT / 2) / ITEM_HEIGHT);\r\n                if (list[index] !== \"\") {\r\n                    setSelected(index);\r\n                    (_a = itemRefs.current[index]) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        block: \"center\",\r\n                    });\r\n                    onSelectedChange && onSelectedChange(newList[index]);\r\n                }\r\n            }, SCROLL_DEBOUNCE_TIME);\r\n        }\r\n    }, [onSelectedChange, newList]);\r\n    useEffect(function () {\r\n        if (ref.current) {\r\n            ref.current.scrollTop = selected * ITEM_HEIGHT;\r\n        }\r\n    }, []);\r\n    return (React.createElement(ScrollPickerLayout, { ref: ref, onScroll: handleScroll },\r\n        React.createElement(ScrollPickerCenter, null),\r\n        newList.map(function (item, index) { return (React.createElement(ScrollPickerItem, { key: index, isSelected: index === selected, ref: function (el) { return (itemRefs.current[index] = el); } }, item)); })));\r\n};\r\nexport default ScrollPicker;\r\n","references":["/Users/chooseongwoo/Coding/Project/ScrollPicker/node_modules/@types/react/ts5.0/index.d.ts"],"dts":{"name":"/Users/chooseongwoo/Coding/Project/ScrollPicker/node_modules/.cache/rollup-plugin-typescript2/placeholder/ScrollPicker.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\r\ninterface ScrollPickerProps {\r\n    list: string[];\r\n    onSelectedChange?: (selected: string) => void;\r\n    ScrollPickerLayout?: React.ElementType;\r\n    ScrollPickerCenter?: React.ElementType;\r\n    ScrollPickerItem?: React.ElementType;\r\n}\r\ndeclare const ScrollPicker: ({ list, onSelectedChange, ScrollPickerLayout, ScrollPickerCenter, ScrollPickerItem, }: ScrollPickerProps) => React.JSX.Element;\r\nexport default ScrollPicker;\r\n"}}
